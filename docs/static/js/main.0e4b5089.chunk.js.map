{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","protoTypes","PropTypes","string","isRequired","GifExpertApp","defaultCategories","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBA,OACI,sBAAMC,SAfW,SAACC,GAClBA,EAAEC,iBAEFC,QAAQC,IAAI,eAAgBN,GAExBA,EAAWO,OAAOC,OAAS,IAC3BV,GAAc,SAAAW,GAAU,OAAKT,GAAL,mBAAmBS,OAC3CR,EAAc,MAQlB,SACI,uBACIS,KAAK,OACLC,MAASX,EACTY,SAzBc,SAACT,GACvBF,EAAcE,EAAEU,OAAOF,OAEvBN,QAAQC,IAAI,mC,+BCOLQ,EAjBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAENC,EAFM,iDAE0CC,UAAUH,GAFpD,+DAGOI,MAAMF,GAHb,cAGNG,EAHM,gBAISA,EAAKC,OAJd,uBAILC,EAJK,EAILA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAV9B,kBAcDM,GAdC,4CAAH,sDCGAO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,Q,OCDHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAErB,ECLwB,SAACA,GAEzB,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAZAC,qBAAU,WAENxB,EAAQC,GACPwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIlB,CAACpB,IAEGqB,EDjBwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACI,qCACA,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAGlDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OAAI,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aAQzDQ,EAAQQ,WAAa,CACjB3B,S,OAAU4B,EAAUC,OAAOC,YExBxB,IAAMC,EAAe,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,EAGxD,EAAoChD,mBAAUgD,GAA9C,mBAAOtC,EAAP,KAAmBX,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQW,EAAWe,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCblCiC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0e4b5089.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n\r\n        console.log('handleInputChange llamado');\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        console.log('handleSubmit', inputValue);\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(categories => [inputValue,...categories]);\r\n            setInputValue('');\r\n        }\r\n\r\n      \r\n    }\r\n\r\n\r\n    return (\r\n        <form onSubmit = {handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","const getGifs = async (category) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=saonvPuAwL2eKjYL8GoCSPqlO4Zn6wgs`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n       return {\r\n            id: img.id, \r\n            title: img.title, \r\n            url: img.images?.downsized_medium.url\r\n        }\r\n        });\r\n\r\n        return gifs;        \r\n}\r\n\r\nexport default getGifs;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n}\r\n","import React, {} from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport PropTypes from 'prop-types';\r\n//import getGifs from '../helpers/getGifs'\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n        <h3 className='animate__animated animate__fadeIn'>{category}</h3>\r\n\r\n        {/*Forma rapida de evaluar*/}\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n        <div className='card-grid'>\r\n            {\r\n                images.map( img => <GifGridItem key={img.id} {...img} /> )\r\n            }\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.protoTypes = {\r\n    category: PropTypes.string.isRequired\r\n}","import {useState, useEffect} from 'react';\r\nimport getGifs from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) =>{\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    //Aqui es donde se hara la peticion para traer las imagenes\r\n    //No pueden ser async porque esperan algo sincrono por eso usaremos promesas\r\n    useEffect(()=> {\r\n\r\n        getGifs(category)\r\n        .then( imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        })\r\n    // Se evalua unicamente cuando la categoria cambia\r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ({ defaultCategories = [] }) => {\r\n    \r\n    // const [categories, setCategories] = useState(['One Punch']);\r\n    const [categories, setCategories] = useState( defaultCategories );\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category  => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}